(()=>{"use strict";const e=!0?()=>{}:console.log;const t=(e=>e?()=>{}:console.error)(!0),a={logTime:e=>()=>{},logInfo:e,logError:t,LogLastError:({lastError:e}=chrome.runtime)=>e?t(e):null},r=()=>new Promise(((e,t)=>{chrome.tabs.query({active:!0,currentWindow:!0},(([t])=>{a.logInfo(t),e(t)}))})),s=r,n=async e=>{const t=e??await r();return new Promise(((e,a)=>{chrome.tabs.sendMessage(t.id,{type:"getOrigin"},(({data:t})=>{const a=chrome.runtime?.lastError;if(a)throw a;e(t)}))}))};const o={storePrefs:function(e,t){try{const a=`preferences_${e}`,r=JSON.stringify(t);return localStorage.setItem(a,r),{success:!0}}catch(e){return{success:!1,error:e}}},retrievePrefs:function(e){const t=`preferences_${e}`,a=localStorage.getItem(t);try{return{data:JSON.parse(a)}}catch(e){return{data:null,error:e}}}},c={onPageLoad:!1,scope:"global",lineHeight:1,edgeOpacity:70,saccadesColor:"",saccadesStyle:"bold-600",saccadesInterval:0,fixationStrength:2,fixationEdgeOpacity:80,MAX_FIXATION_PARTS:4,FIXATION_LOWER_BOUND:0,BR_WORD_STEM_PERCENTAGE:.7},i=[],d=[];let g;const l=()=>"function"==typeof chrome?.extension?.getBackgroundPage&&chrome.extension.getBackgroundPage()===window;async function f(e){return new Promise(((t,a)=>{if(l()){const a=o.retrievePrefs(e);t(a?.data)}else chrome.runtime.sendMessage({message:"retrievePrefs",action:e},(async e=>{t(e?.data)}))}))}function u(e,t){return new Promise(((a,r)=>{l()?(o.storePrefs(t,e),a(!0)):chrome.runtime.sendMessage({message:"storePrefs",data:e,action:t},(async e=>{a(!0)}))}))}async function m(){return f("local")}async function h(){return f("global")}async function y(e){return u(e,"local")}async function p(e){return u(e,"global")}async function b(){return{...(await m())[await g()]??await h()}}async function w(e){const t=await m();let a=await h();const r=await g(),s={..."local"===t[r]?.scope?t[r]:a},n={...s,..."function"==typeof e?e(s):e};"global"===n.scope?(a={...a,...t[r]?null:n,scope:n.scope},t[r]&&delete t[r]):t[r]={...t[r],...n},E(t[r]??a),y(t),p(a)}async function P(){let e=await m(),t=await h();const a=await g();null==e&&(e={}),t={...c,...t},y(e),p(t),"local"===e[a]?.scope?(E(e[a]),E(e[a],d)):(E(t),E(t,d))}function E(e,t){Array.isArray(t)?t.forEach((t=>{t(e)})):i.forEach((t=>{t(e)}))}const I={init:function(e){return e.subscribe&&i.push(e.subscribe),e.onStartup&&d.push(e.onStartup),g=e.getOrigin,{start:P,setPrefs:w,getPrefs:b,defaultPrefs:()=>c}}},L="undefined"==typeof browser?chrome:browser,{getPrefs:O,defaultPrefs:M}=I.init({getOrigin:async()=>n()});chrome.runtime.onInstalled.addListener((e=>{a.logInfo("install success",e.reason),e.reason,chrome.tabs.create({active:!0,url:"https://github.com/ansh/jiffyreader.com#FAQ"})})),chrome.commands.onCommand.addListener((async e=>{if(a.logInfo("commmand fired",e),"toggle-bionic"===e){const e=await s(),[{data:t},r]=await new Promise(((t,r)=>{chrome.tabs.sendMessage(e.id,{type:"getReadingMode"},(r=>{a.logInfo({activeTab:e,response:r}),t([r,chrome.runtime?.lastError])}))}));if(r)throw a.logError(r);const n=await O(),o=!t;chrome.tabs.sendMessage(e.id,{type:"setReadingMode",data:o},(()=>a.LogLastError())),o&&(a.logInfo(n),chrome.tabs.sendMessage(e.id,{type:"setSaccadesIntervalInDOM",data:n.saccadesInterval},(()=>a.LogLastError())),chrome.tabs.sendMessage(e.id,{type:"setLineHeight",data:n.lineHeight}),chrome.tabs.sendMessage(e.id,{type:"setFixationStrength",data:n.fixationStrength},(()=>a.LogLastError())),chrome.tabs.sendMessage(e.id,{type:"setFixationEdgeOpacity",data:n.fixationEdgeOpacity},(()=>a.LogLastError())),chrome.tabs.sendMessage(e.id,{type:"setSaccadesStyle",data:n.saccadesStyle},(()=>a.LogLastError())))}})),L.runtime.onMessage.addListener(((e,t,a)=>{switch(e.message){case"storePrefs":a(o.storePrefs(e.action,e.data));break;case"retrievePrefs":a(o.retrievePrefs(e.action));break;case"setIconBadgeText":s().then((t=>{chrome.browserAction.setBadgeText({text:e.data?"On":"Off",tabId:t.id}),a(!0)}));break;default:a(!1)}}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,